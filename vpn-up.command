#!/bin/bash

# Author: Sorin-Doru Ipate
# Edited by: Mohammad Amin Dadgar
# Copyright (c) Sorin-Doru Ipate

PROGRAM_NAME=$(basename $0)
echo "Starting $PROGRAM_NAME ..."

PID_FILE_PATH="${PWD}/${PROGRAM_NAME}.pid"
echo "Process ID (PID) stored in $PID_FILE_PATH ..."
LOG_FILE_PATH="${PWD}/${PROGRAM_NAME}.log"
echo "Logs file (LOG) stored in $LOG_FILE_PATH ..."

# OPTIONS
BACKGROUND=TRUE
    # TRUE          Runs in background after startup
    # FALSE         Runs in foreground after startup

QUIET=TRUE
    # TRUE          Less output
    # FALSE         Detailed output

# VPN PROFILE 1
export VPN1_NAME="VPN PROFILE 1"
export VPN1_PROTOCOL=<protocol>
    # anyconnect       Compatible with Cisco AnyConnect SSL VPN, as well as ocserv (default)
    # nc               Compatible with Juniper Network Connect
    # gp               Compatible with Palo Alto Networks (PAN) GlobalProtect SSL VPN
    # pulse            Compatible with Pulse Connect Secure SSL VPN
export VPN1_HOST=<vpn.url>
export VPN1_AUTHGROUP=<group>
export VPN1_USER=<username>
export VPN1_PASSWD="<password>"
export VPN1_DUO2FAMETHOD="<2famethod>"  # Duo 2FA Method
    # passcode         Log in using a passcode, either generated with Duo Mobile, sent via SMS, generated by your hardware token, or provided by an administrator. E.g. to use the passcode “123456," type 123456
    # push             Push a login request to your registered phone (if you have Duo Mobile installed and activated on your iOS, or Windows phone device). Just review the request and select Approve to log in.
    # phone            Authenticate via callback to your registered phone.
    # sms              Sends an SMS message with a new batch of passcodes to your registered device. Your initial login attempt will fail. Login again with one of the new passcodes.
export VPN1_SERVER_CERTIFICATE=""  # SHA1

# VPN PROFILE 2
export VPN2_NAME="VPN PROFILE 2"
export VPN2_PROTOCOL=<protocol>
    # anyconnect       Compatible with Cisco AnyConnect SSL VPN, as well as ocserv (default)
    # nc               Compatible with Juniper Network Connect
    # gp               Compatible with Palo Alto Networks (PAN) GlobalProtect SSL VPN
    # pulse            Compatible with Pulse Connect Secure SSL VPN
export VPN2_HOST=<vpn.url>
export VPN2_AUTHGROUP=<group>
export VPN2_USER=<username>
export VPN2_PASSWD="<password>"
export VPN2_DUO2FAMETHOD="<2famethod>"  # Duo 2FA Method
    # passcode         Log in using a passcode, either generated with Duo Mobile, sent via SMS, generated by your hardware token, or provided by an administrator. E.g. to use the passcode “123456," type 123456
    # push             Push a login request to your registered phone (if you have Duo Mobile installed and activated on your iOS, or Windows phone device). Just review the request and select Approve to log in.
    # phone            Authenticate via callback to your registered phone.
    # sms              Sends an SMS message with a new batch of passcodes to your registered device. Your initial login attempt will fail. Login again with one of the new passcodes.
export VPN2_SERVER_CERTIFICATE=""  # SHA1

function start(){

    if ! is_network_available
        then 
            printf "Network is not available. Check your internet connection. \n"
            exit 1
    fi

    if is_vpn_running
        then
            printf "VPN is already running\n"
            exit 1
    fi

    echo "Which VPN do you want to connect to?"
    options=("$VPN1_NAME" "$VPN2_NAME" "$VPN3_NAME" "Quit")
    select option in "${options[@]}";
        do
            case $option in
                "$VPN1_NAME")
                    export VPN_NAME=$VPN1_NAME
                    export VPN_HOST=$VPN1_HOST
                    export VPN_GROUP=$VPN1_AUTHGROUP
                    export VPN_USER=$VPN1_USER
                    export VPN_PASSWD=$VPN1_PASSWD
                    export VPN_DUO2FAMETHOD=$VPN1_DUO2FAMETHOD
                    export SERVER_CERTIFICATE=$VPN1_SERVER_CERTIFICATE
                    export PROTOCOL=$VPN1_PROTOCOL
                    connect
                    break
                    ;;
                "$VPN2_NAME")
                    export VPN_NAME=$VPN2_NAME
                    export VPN_HOST=$VPN2_HOST
                    export VPN_GROUP=$VPN2_AUTHGROUP
                    export VPN_USER=$VPN2_USER
                    export VPN_PASSWD=$VPN2_PASSWD
                    export VPN_DUO2FAMETHOD=$VPN2_DUO2FAMETHOD
                    export SERVER_CERTIFICATE=$VPN2_SERVER_CERTIFICATE
                    export PROTOCOL=$VPN2_PROTOCOL
                    connect
                    break
                    ;;
                "$VPN3_NAME")
                    export VPN_NAME=$VPN3_NAME
                    export VPN_HOST=$VPN3_HOST
                    export VPN_GROUP=$VPN3_AUTHGROUP
                    export VPN_USER=$VPN3_USER
                    export VPN_PASSWD=$VPN3_PASSWD
                    export VPN_DUO2FAMETHOD=$VPN3_DUO2FAMETHOD
                    export SERVER_CERTIFICATE=$VPN3_SERVER_CERTIFICATE
                    export PROTOCOL=$VPN3_PROTOCOL
                    connect
                    break
                    ;;
                "Quit")
                echo "User requested exit"
                    exit
                    ;;
                *)
                echo "invalid option $REPLY";; 
            esac
            if is_vpn_running
            then 
                printf "VPN is connected \n"
                print_current_ip_address
                break
            else
                printf "VPN failed to connect! \n"
        fi
        done
}

function connect(){
    if [[ -z $VPN_HOST ]]
        then
            echo "Variable 'VPN_HOST' is not declared! Update the variable 'VPN_HOST' declaration in VPN PROFILES ..."
            return
    fi
    if [[ -z $PROTOCOL ]]
        then
            echo "Variable 'PROTOCOL' is not declared! Update the variable 'PROTOCOL' declaration in VPN PROFILES ..."
            return
    fi
    
    case $PROTOCOL in
        "anyconnect")
            export PROTOCOL_DESCRIPTION="Cisco AnyConnect SSL VPN"
            ;;
        "nc")
            export PROTOCOL_DESCRIPTION="Juniper Network Connect"
            ;;
        "gp")
            export PROTOCOL_DESCRIPTION="Palo Alto Networks (PAN) GlobalProtect SSL VPN"
            ;;
        "pulse")
            export PROTOCOL_DESCRIPTION="Pulse Connect Secure SSL VPN"
            ;;
        *)
            echo "Unsupported protocol! Update the variable 'PROTOCOL' declaration in VPN PROFILES ..."
            return
            ;;
    esac

    case $VPN_DUO2FAMETHOD in
        "push")
            export VPN_DUO2FAMETHOD_DESCRIPTION="PUSH"
            ;;
        "phone")
            export VPN_DUO2FAMETHOD_DESCRIPTION="PHONE"
            ;;
        "sms")
            export VPN_DUO2FAMETHOD_DESCRIPTION="SMS"
            ;;
        *)
            if [[ "$VPN_DUO2FAMETHOD" =~ ^[0-9]{6}$ ]]
                then
                    export VPN_DUO2FAMETHOD_DESCRIPTION="PASSCODE"
                else
                    echo "Unsupported PASSCODE format! Update the variable 'VPN_DUO2FAMETHOD' declaration in VPN PROFILES ..."
                    return
            fi
            ;;
    esac
        
    echo "Starting the $VPN_NAME on $VPN_HOST using $PROTOCOL_DESCRIPTION ..."
    
    if [ "$VPN_DUO2FAMETHOD" = "" ]
        then
            echo "Connecting without 2FA ..."
            if [ "$SERVER_CERTIFICATE" = "" ]
                then
                    echo "Connecting without server certificate ..."
                    if [ "$BACKGROUND" = TRUE ]
                        then
                            echo "Running the $VPN_NAME in background ..."
                            if [ "$QUIET" = TRUE ]
                            then
                                echo "Running the $VPN_NAME with less output (quiet) ..."
                                echo $VPN_PASSWD | sudo openconnect --protocol=$PROTOCOL --background -q $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            else
                                echo "Running the $VPN_NAME with detailed output ..."
                                echo $VPN_PASSWD | sudo openconnect --protocol=$PROTOCOL --background $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            fi
                        else
                            echo "Running the $VPN_NAME ..."
                            if [ "$QUIET" = TRUE ]
                            then
                                echo "Running the $VPN_NAME with less output (quiet) ..."
                                echo $VPN_PASSWD | sudo openconnect --protocol=$PROTOCOL -q $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            else
                                echo "Running the $VPN_NAME with detailed output ..."
                                echo $VPN_PASSWD | sudo openconnect --protocol=$PROTOCOL $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            fi
                        fi
                else
                    echo "Connecting with certificate ..."
                    if [ "$BACKGROUND" = TRUE ]
                        then
                            echo "Running the $VPN_NAME in background ..."
                            if [ "$QUIET" = TRUE ]
                            then
                                echo "Running the $VPN_NAME with less output (quiet) ..."
                                echo $VPN_PASSWD | sudo openconnect --protocol=$PROTOCOL --background -q $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --servercert=$SERVER_CERTIFICATE --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            else
                                echo "Running the $VPN_NAME with detailed output ..."
                                echo $VPN_PASSWD | sudo openconnect --protocol=$PROTOCOL --background $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --servercert=$SERVER_CERTIFICATE --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            fi
                        else
                            echo "Running the $VPN_NAME ..."
                            if [ "$QUIET" = TRUE ]
                            then
                                echo "Running the $VPN_NAME with less output (quiet) ..."
                                echo $VPN_PASSWD | sudo openconnect --protocol=$PROTOCOL -q $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --servercert=$SERVER_CERTIFICATE --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            else
                                echo "Running the $VPN_NAME with detailed output ..."
                                echo $VPN_PASSWD | sudo openconnect --protocol=$PROTOCOL $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --servercert=$SERVER_CERTIFICATE --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            fi
                        fi
                fi

        else
            echo "Connecting with Two-Factor Authentication (2FA) from Duo ($VPN_DUO2FAMETHOD_DESCRIPTION) ..."
            if [ "$SERVER_CERTIFICATE" = "" ]
                then
                    echo "Connecting without server certificate ..."
                    if [ "$BACKGROUND" = TRUE ]
                        then
                            echo "Running the $VPN_NAME in background ..."
                            if [ "$QUIET" = TRUE ]
                            then
                                echo "Running the $VPN_NAME with less output (quiet) ..."
                                { echo $VPN_PASSWD; sleep 1; echo $VPN_DUO2FAMETHOD; } | sudo openconnect --protocol=$PROTOCOL --background -q $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            else
                                echo "Running the $VPN_NAME with detailed output ..."
                                { echo $VPN_PASSWD; sleep 1; echo $VPN_DUO2FAMETHOD; } | sudo openconnect --protocol=$PROTOCOL --background $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            fi
                        else
                            echo "Running the $VPN_NAME ..."
                            if [ "$QUIET" = TRUE ]
                            then
                                echo "Running the $VPN_NAME with less output (quiet) ..."
                                { echo $VPN_PASSWD; sleep 1; echo $VPN_DUO2FAMETHOD; } | sudo openconnect --protocol=$PROTOCOL -q $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            else
                                echo "Running the $VPN_NAME with detailed output ..."
                                { echo $VPN_PASSWD; sleep 1; echo $VPN_DUO2FAMETHOD; } | sudo openconnect --protocol=$PROTOCOL $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            fi
                        fi
                else
                    echo "Connecting with certificate ..."
                    if [ "$BACKGROUND" = TRUE ]
                        then
                            echo "Running the $VPN_NAME in background ..."
                            if [ "$QUIET" = TRUE ]
                            then
                                echo "Running the $VPN_NAME with less output (quiet) ..."
                                { echo $VPN_PASSWD; sleep 1; echo $VPN_DUO2FAMETHOD; } | sudo openconnect --protocol=$PROTOCOL --background -q $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --servercert=$SERVER_CERTIFICATE --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            else
                                echo "Running the $VPN_NAME with detailed output ..."
                                { echo $VPN_PASSWD; sleep 1; echo $VPN_DUO2FAMETHOD; } | sudo openconnect --protocol=$PROTOCOL --background $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --servercert=$SERVER_CERTIFICATE --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            fi
                        else
                            echo "Running the $VPN_NAME ..."
                            if [ "$QUIET" = TRUE ]
                            then
                                echo "Running the $VPN_NAME with less output (quiet) ..."
                                { echo $VPN_PASSWD; sleep 1; echo $VPN_DUO2FAMETHOD; } | sudo openconnect --protocol=$PROTOCOL -q $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --servercert=$SERVER_CERTIFICATE --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            else
                                echo "Running the $VPN_NAME with detailed output ..."
                                { echo $VPN_PASSWD; sleep 1; echo $VPN_DUO2FAMETHOD; } | sudo openconnect --protocol=$PROTOCOL $VPN_HOST --user=$VPN_USER --authgroup=$VPN_GROUP --passwd-on-stdin --servercert=$SERVER_CERTIFICATE --pid-file $PID_FILE_PATH > $LOG_FILE_PATH 2>&1
                            fi
                        fi
                fi
        fi
    status
}

function status() {
    is_vpn_running && printf "VPN is running \n" || printf "VPN is stopped \n"
    print_current_ip_address
}

function stop() {

    if is_vpn_running
        then
            echo "VPN is running ... Removing $PID_FILE_PATH ..."
            
            # kill -9 $(pgrep openconnect) > /dev/null 2>&1
            local pid=$(cat $PID_FILE_PATH)
            kill -9 $pid > /dev/null 2>&1
            rm -f $PID_FILE_PATH > /dev/null 2>&1
    fi
    
    printf "VPN is disconnected \n"
    print_current_ip_address
}

function print_info() {
    echo "Usage: $(basename "$0") (start|stop|status|restart)"
}

function is_network_available() {
    ping -q -c 1 -W 1 8.8.8.8 > /dev/null 2>&1;
}

function is_vpn_running() {
    test -f $PID_FILE_PATH && return 0
     #local pid=$(cat $PID_FILE_PATH)
    # kill -0 $pid > /dev/null 2>&1
}

function print_current_ip_address() {
    local ip=$(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com)
    printf "Your IP address is $ip \n"
}

case "$1" in

	start)
	
		start
		;;
	
	stop)
	
		stop
		;;
	
	status)
	
		status
		;;
	
	restart)
	
		$0 stop
		$0 start
		;;
	
	*)
	
		print_info
		exit 0
		;;
esac