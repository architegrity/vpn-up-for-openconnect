#!/bin/bash

# Author: Sorin-Doru Ipate
# Edited by: Mohammad Amin Dadgar
# Copyright (c) Sorin-Doru Ipate

PROGRAM_NAME=$(basename "$0")

PID_FILE_PATH="${PWD}/${PROGRAM_NAME}.pid"
LOG_FILE_PATH="${PWD}/${PROGRAM_NAME}.log"

# OPTIONS
readonly BACKGROUND=TRUE
#        ├ TRUE          Runs in background after startup
#        └ FALSE         Runs in foreground after startup

readonly QUIET=TRUE
#        ├ TRUE          Less output
#        └ FALSE         Detailed output

readonly SUDO=FALSE
#        ├ TRUE
#        └ FALSE
readonly SUDO_PASSWORD=""

readonly PRIMARY="\x1b[36;1m"
readonly SUCCESS="\x1b[32;1m"
readonly WARNING="\x1b[35;1m"
readonly DANGER="\x1b[31;1m"
readonly RESET="\x1b[0m"

# VPN PROFILE 1
export VPN1_NAME="VPN PROFILE 1"
export VPN1_PROTOCOL=
#      ├ anyconnect       Compatible with Cisco AnyConnect SSL VPN, as well as ocserv (default)
#      ├ nc               Compatible with Juniper Network Connect
#      ├ gp               Compatible with Palo Alto Networks (PAN) GlobalProtect SSL VPN
#      └ pulse            Compatible with Pulse Connect Secure SSL VPN
export VPN1_HOST=
export VPN1_AUTHGROUP=
export VPN1_USER=
export VPN1_PASSWD="<password>"
export VPN1_DUO2FAMETHOD="<2famethod>" # Duo 2FA Method
#      ├ passcode         Log in using a passcode, either generated with Duo Mobile, sent via SMS, generated by your hardware token, or provided by an administrator. E.g. to use the passcode “123456," type 123456
#      ├ push             Push a login request to your registered phone (if you have Duo Mobile installed and activated on your iOS, or Windows phone device). Just review the request and select Approve to log in.
#      ├ phone            Authenticate via callback to your registered phone.
#      └ sms              Sends an SMS message with a new batch of passcodes to your registered device. Your initial login attempt will fail. Login again with one of the new passcodes.
export VPN1_SERVER_CERTIFICATE="" # SHA1

# VPN PROFILE 2
export VPN2_NAME="VPN PROFILE 2"
export VPN2_PROTOCOL=
#      ├ anyconnect       Compatible with Cisco AnyConnect SSL VPN, as well as ocserv (default)
#      ├ nc               Compatible with Juniper Network Connect
#      ├ gp               Compatible with Palo Alto Networks (PAN) GlobalProtect SSL VPN
#      └ pulse            Compatible with Pulse Connect Secure SSL VPN
export VPN2_HOST=
export VPN2_AUTHGROUP=
export VPN2_USER=
export VPN2_PASSWD="<password>"
export VPN2_DUO2FAMETHOD="<2famethod>" # Duo 2FA Method
#      ├ passcode         Log in using a passcode, either generated with Duo Mobile, sent via SMS, generated by your hardware token, or provided by an administrator. E.g. to use the passcode “123456," type 123456
#      ├ push             Push a login request to your registered phone (if you have Duo Mobile installed and activated on your iOS, or Windows phone device). Just review the request and select Approve to log in.
#      ├ phone            Authenticate via callback to your registered phone.
#      └ sms              Sends an SMS message with a new batch of passcodes to your registered device. Your initial login attempt will fail. Login again with one of the new passcodes.
export VPN2_SERVER_CERTIFICATE="" # SHA1

function start() {

    if ! is_network_available; then
        printf "%s" "${DANGER}"
        printf "Please check your internet connection or try again later!\n"
        printf "%s" "${RESET}"
        exit 1
    fi

    if is_vpn_running; then
        printf "%s" "${WARNING}"
        printf "Already connected to a VPN!\n"
        printf "%s" "${RESET}"
        exit 1
    fi

    if [ "$SUDO" = TRUE ]; then
        if [[ -z $SUDO_PASSWORD ]]; then
            printf "%s" "${DANGER}"
            printf "Variable 'SUDO_PASSWORD' is not declared! Update the variable 'SUDO_PASSWORD' declaration in OPTIONS ..."
            printf "%s" "${RESET}"
            return
        else
            cat sudo -S <<<"${SUDO_PASSWORD}"
            printf "%s" "${WARNING}"
            printf "Running as root ...\n"
            printf "%s" "${RESET}"
        fi
    else
        printf "%s" "${WARNING}"
        printf "Running as normal user! OpenConnect requires to be executed with root privileges; please enter the root password when prompted...\n"
        printf "%s" "${RESET}"

    fi

    printf "%s" "${PRIMARY}"
    printf "Starting %s ...\n" "${PROGRAM_NAME}"
    printf "%s" "${RESET}"

    printf "%s" "${WARNING}"
    printf "Process ID (PID) stored in %s ...\n" "${PID_FILE_PATH}"
    printf "%s" "${RESET}"

    printf "%s" "${WARNING}"
    printf "Logs file (LOG) stored in %s ...\n" "${LOG_FILE_PATH}"
    printf "%s" "${RESET}"

    printf "%s" "${PRIMARY}"
    printf "Which VPN do you want to connect to?\n"
    options=("$VPN1_NAME" "$VPN2_NAME" "Quit")
    printf "%s" "${RESET}"
    select option in "${options[@]}"; do
        case $option in
        "$VPN1_NAME")
            export VPN_NAME=$VPN1_NAME
            export VPN_HOST=$VPN1_HOST
            export VPN_GROUP=$VPN1_AUTHGROUP
            export VPN_USER=$VPN1_USER
            export VPN_PASSWD=$VPN1_PASSWD
            export VPN_DUO2FAMETHOD=$VPN1_DUO2FAMETHOD
            export SERVER_CERTIFICATE=$VPN1_SERVER_CERTIFICATE
            export PROTOCOL=$VPN1_PROTOCOL
            connect
            break
            ;;
        "$VPN2_NAME")
            export VPN_NAME=$VPN2_NAME
            export VPN_HOST=$VPN2_HOST
            export VPN_GROUP=$VPN2_AUTHGROUP
            export VPN_USER=$VPN2_USER
            export VPN_PASSWD=$VPN2_PASSWD
            export VPN_DUO2FAMETHOD=$VPN2_DUO2FAMETHOD
            export SERVER_CERTIFICATE=$VPN2_SERVER_CERTIFICATE
            export PROTOCOL=$VPN2_PROTOCOL
            connect
            break
            ;;
        "Quit")
            printf "%s" "${WARNING}"
            printf "You chose to close the app!\n"
            printf "%s" "${RESET}"
            exit
            ;;
        *)

            printf "%s" "${DANGER}"
            printf "Invalid option! Please choose one of the options above...\n"
            printf "%s" "${RESET}"
            printf "%s" "${REPLY}"
            ;;
        esac
    done
    if is_vpn_running; then
        printf "%s" "${SUCCESS}"
        printf "Connected to %s\n" "${VPN_NAME}"
        print_current_ip_address
        printf "%s" "${RESET}"
    else
        printf "%s" "${DANGER}"
        printf "Failed to connect!\n"
        printf "%s" "${RESET}"
    fi
}

function connect() {
    if [[ -z "${VPN_HOST}" ]]; then
        printf "%s" "${DANGER}"
        printf "Variable 'VPN_HOST' is not declared! Update the variable 'VPN_HOST' declaration in VPN PROFILES ...\n"
        printf "%s" "${RESET}"
        return
    fi
    if [[ -z $PROTOCOL ]]; then
        printf "%s" "${DANGER}"
        printf "Variable 'PROTOCOL' is not declared! Update the variable 'PROTOCOL' declaration in VPN PROFILES ..."
        printf "%s" "${RESET}"
        return
    fi

    case $PROTOCOL in
    "anyconnect")
        export PROTOCOL_DESCRIPTION="Cisco AnyConnect SSL VPN"
        ;;
    "nc")
        export PROTOCOL_DESCRIPTION="Juniper Network Connect"
        ;;
    "gp")
        export PROTOCOL_DESCRIPTION="Palo Alto Networks (PAN) GlobalProtect SSL VPN"
        ;;
    "pulse")
        export PROTOCOL_DESCRIPTION="Pulse Connect Secure SSL VPN"
        ;;
    *)
        printf "%s" "${DANGER}"
        printf "Unsupported protocol! Update the variable 'PROTOCOL' declaration in VPN PROFILES ..."
        printf "%s" "${RESET}"
        return
        ;;
    esac

    case $VPN_DUO2FAMETHOD in
    "push")
        export VPN_DUO2FAMETHOD_DESCRIPTION="PUSH"
        ;;
    "phone")
        export VPN_DUO2FAMETHOD_DESCRIPTION="PHONE"
        ;;
    "sms")
        export VPN_DUO2FAMETHOD_DESCRIPTION="SMS"
        ;;
    "")
        export VPN_DUO2FAMETHOD_DESCRIPTION="NONE"
        ;;
    *)
        if [[ "$VPN_DUO2FAMETHOD" =~ ^[0-9]{6}$ ]]; then
            export VPN_DUO2FAMETHOD_DESCRIPTION="PASSCODE"
        else
            printf "%s" "${DANGER}"
            printf "Unsupported PASSCODE format! Update the variable 'VPN_DUO2FAMETHOD' declaration in VPN PROFILES ..."
            printf "%s" "${RESET}"
            return
        fi
        ;;
    esac

    printf "%s" "${PRIMARY}"
    printf "Starting the %s on %s using %s ...\n" "${VPN_NAME}" "${VPN_HOST}" "${PROTOCOL_DESCRIPTION}"
    printf "%s" "${RESET}"

    if [ "$VPN_DUO2FAMETHOD" = "" ]; then
        printf "%s" "${WARNING}"
        printf "Connecting without 2FA (%s) ...\n" "${VPN_DUO2FAMETHOD_DESCRIPTION}"
        printf "%s" "${RESET}"
        if [ "$SERVER_CERTIFICATE" = "" ]; then
            printf "%s" "${WARNING}"
            printf "Connecting without server certificate ...\n"
            printf "%s" "${RESET}"
            if [ "$BACKGROUND" = TRUE ]; then
                printf "%s" "${PRIMARY}"
                printf "Running the %s in background ...\n" "${VPN_NAME}"
                printf "%s" "${RESET}"
                if [ "$QUIET" = TRUE ]; then
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with less output (quiet) ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    echo $VPN_PASSWD | sudo openconnect --protocol="${PROTOCOL}" --background -q "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                else
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with detailed output ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    echo $VPN_PASSWD | sudo openconnect --protocol="${PROTOCOL}" --background "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                fi
            else
                printf "%s" "${PRIMARY}"
                printf "Running the %s ...\n" "${VPN_NAME}"
                printf "%s" "${RESET}"
                if [ "$QUIET" = TRUE ]; then
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with less output (quiet) ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    echo $VPN_PASSWD | sudo openconnect --protocol="${PROTOCOL}" -q "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                else
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with detailed output ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    echo $VPN_PASSWD | sudo openconnect --protocol="${PROTOCOL}" "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                fi
            fi
        else
            printf "%s" "${PRIMARY}"
            printf "Connecting with certificate ...\n"
            printf "%s" "${RESET}"
            if [ "$BACKGROUND" = TRUE ]; then
                printf "%s" "${PRIMARY}"
                printf "Running the %s in background ...\n" "${VPN_NAME}"
                printf "%s" "${RESET}"
                if [ "$QUIET" = TRUE ]; then
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with less output (quiet) ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    echo $VPN_PASSWD | sudo openconnect --protocol="${PROTOCOL}" --background -q "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --servercert="${SERVER_CERTIFICATE}" --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                else
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with detailed output ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    echo $VPN_PASSWD | sudo openconnect --protocol="${PROTOCOL}" --background "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --servercert="${SERVER_CERTIFICATE}" --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                fi
            else
                printf "%s" "${PRIMARY}"
                printf "Running the %s ...\n" "${VPN_NAME}"
                printf "%s" "${RESET}"
                if [ "$QUIET" = TRUE ]; then
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with less output (quiet) ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    echo $VPN_PASSWD | sudo openconnect --protocol="${PROTOCOL}" -q "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --servercert="${SERVER_CERTIFICATE}" --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                else
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with detailed output ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    echo $VPN_PASSWD | sudo openconnect --protocol="${PROTOCOL}" "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --servercert="${SERVER_CERTIFICATE}" --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                fi
            fi
        fi

    else
        printf "%s" "${PRIMARY}"
        printf "Connecting with Two-Factor Authentication (2FA) from Duo (%s) ...\n" "${VPN_DUO2FAMETHOD_DESCRIPTION}"
        printf "%s" "${RESET}"
        if [ "$SERVER_CERTIFICATE" = "" ]; then
            printf "%s" "${WARNING}"
            printf "Connecting without server certificate ...\n"
            printf "%s" "${RESET}"
            if [ "$BACKGROUND" = TRUE ]; then
                printf "%s" "${PRIMARY}"
                printf "Running the %s in background ...\n" "${VPN_NAME}"
                printf "%s" "${RESET}"
                if [ "$QUIET" = TRUE ]; then
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with less output (quiet) ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    {
                        echo $VPN_PASSWD
                        sleep 1
                        echo $VPN_DUO2FAMETHOD
                    } | sudo openconnect --protocol="${PROTOCOL}" --background -q "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                else
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with detailed output ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    {
                        echo $VPN_PASSWD
                        sleep 1
                        echo $VPN_DUO2FAMETHOD
                    } | sudo openconnect --protocol="${PROTOCOL}" --background "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                fi
            else
                printf "%s" "${PRIMARY}"
                printf "Running the %s ...\n" "${VPN_NAME}"
                printf "%s" "${RESET}"
                if [ "$QUIET" = TRUE ]; then
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with less output (quiet) ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    {
                        echo $VPN_PASSWD
                        sleep 1
                        echo $VPN_DUO2FAMETHOD
                    } | sudo openconnect --protocol="${PROTOCOL}" -q "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                else
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with detailed output ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    {
                        echo $VPN_PASSWD
                        sleep 1
                        echo $VPN_DUO2FAMETHOD
                    } | sudo openconnect --protocol="${PROTOCOL}" "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                fi
            fi
        else
            printf "%s" "${PRIMARY}"
            printf "Connecting with certificate ...\n"
            printf "%s" "${RESET}"
            if [ "$BACKGROUND" = TRUE ]; then
                printf "%s" "${PRIMARY}"
                printf "Running the %s in background ...\n" "${VPN_NAME}"
                printf "%s" "${RESET}"
                if [ "$QUIET" = TRUE ]; then
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with less output (quiet) ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    {
                        echo $VPN_PASSWD
                        sleep 1
                        echo $VPN_DUO2FAMETHOD
                    } | sudo openconnect --protocol="${PROTOCOL}" --background -q "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --servercert="${SERVER_CERTIFICATE}" --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                else
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with detailed output ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    {
                        echo $VPN_PASSWD
                        sleep 1
                        echo $VPN_DUO2FAMETHOD
                    } | sudo openconnect --protocol="${PROTOCOL}" --background "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --servercert="${SERVER_CERTIFICATE}" --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                fi
            else
                printf "%s" "${PRIMARY}"
                printf "Running the %s ...\n" "${VPN_NAME}"
                printf "%s" "${RESET}"
                if [ "$QUIET" = TRUE ]; then
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with less output (quiet) ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    {
                        echo $VPN_PASSWD
                        sleep 1
                        echo $VPN_DUO2FAMETHOD
                    } | sudo openconnect --protocol="${PROTOCOL}" -q "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --servercert="${SERVER_CERTIFICATE}" --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                else
                    printf "%s" "${PRIMARY}"
                    printf "Running the %s with detailed output ...\n" "${VPN_NAME}"
                    printf "%s" "${RESET}"
                    {
                        echo $VPN_PASSWD
                        sleep 1
                        echo $VPN_DUO2FAMETHOD
                    } | sudo openconnect --protocol="${PROTOCOL}" "${VPN_HOST}" --user="${VPN_USER}" --authgroup="${VPN_GROUP}" --passwd-on-stdin --servercert="${SERVER_CERTIFICATE}" --pid-file "${PID_FILE_PATH}" >"${LOG_FILE_PATH}" 2>&1
                fi
            fi
        fi
    fi
    #status
}

function status() {
    if is_vpn_running; then
        printf "%s" "${SUCCESS}"
        printf "Connected ...\n"
    else
        printf "%s" "${PRIMARY}"
        printf "Not connected ...\n"
    fi
    print_current_ip_address
    printf "%s" "${RESET}"
}

function stop() {

    if is_vpn_running; then
        printf "%s" "${WARNING}"
        printf "Connected ...\nRemoving %s ...\n" "${PID_FILE_PATH}"
        printf "%s" "${RESET}"
        local pid=$(cat $PID_FILE_PATH)
        kill -9 $pid >/dev/null 2>&1
        rm -f "${PID_FILE_PATH}" >/dev/null 2>&1
        printf "%s" "${SUCCESS}"
        printf "Disconnected ...\n"
    else
        printf "%s" "${PRIMARY}"
        printf "Disconnected ...\n"
    fi

    print_current_ip_address
    printf "%s" "${RESET}"
}

function print_info() {

    printf "%s" "${WARNING}"
    printf "Usage: %s (start|stop|status|restart)\n" "$(basename "$0")"
    printf "%s" "${RESET}"

}

function is_network_available() {
    ping -q -c 1 -W 1 8.8.8.8 >/dev/null 2>&1
}

function is_vpn_running() {
    test -f $PID_FILE_PATH && return 0
}

function print_current_ip_address() {
    local ip=$(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com)
    printf "Your IP address is %s ...\n" "${ip}"
}

case "$1" in

start)

    start
    ;;

stop)

    stop
    ;;

status)

    status
    ;;

restart)

    $0 stop
    $0 start
    ;;

*)

    print_info
    exit 0
    ;;
esac
